#!/bin/zsh

# This script builds, installs, and manages the _CN_ side of the FBS.
# Don't confuse it with `manager`, the script that manages the whole cluster
# (manager calls builder on each node).

if [[ -z $MIND_ROOT ]]; then
        echo '$MIND_ROOT not set!' >/dev/stderr
        exit 1
fi
source $MIND_ROOT/scripts/config.sh
cd $MIND_ROOT/mind_linux

host_root="$MIND_ROOT/mind_linux"

function run_command () { 
	echo "$HOST kernel: "
	indent "$@"
}

function checkout_kernel_commit () { 
	echo "$HOST: Checking out commit"
	chronic -e git checkout "$@"
}

function show_latest_kernel_commit () { 
	echo "$HOST kernel HEAD commit is:"
	indent git --no-pager log --color=always -2 --abbrev-commit --pretty=oneline
}

function synchronize_kernel_code () { 
	echo "$HOST: Pulling kernel changes"
	chronic -e git pull --rebase
	local pull_status="$!"
	if [ "$pull_status" -ne 0 ]; then
		echo "$HOST: Synchronize-Kernel failed! Exit code $pull_status" >/dev/stderr
		exit "$pull_status"
	fi
}

function build_kernel () { 
	echo 'Warning: Currently building debug kernels with "-ggdb3"'
	echo '         Disable debug builds before testing performance.'
	show_latest_kernel_commit | tee build-kernel.log
	sudo ./build_kernel.sh build 2>&1 | tee -a build-kernel.log
	local build_status="${PIPESTATUS[0]}"
	if [ "$build_status" -ne 0 ]; then
		echo "$HOST: Build Kernel failed! Exit code $build_status" >/dev/stderr
		exit "$build_status"
	fi
}

function build_modules () { 
	show_latest_kernel_commit | tee build-modules.log
	sudo ./build_kernel_modules.sh 2>&1 | tee -a build-modules.log
	local build_status="${PIPESTATUS[0]}"
	if [ "$build_status" -ne 0 ]; then
		echo "$HOST: Build Modules failed! Exit code $build_status" >/dev/stderr
		exit "$build_status"
	fi
}

function build_roce () { 
	$MIND_ROOT/scripts/bricks/v_build_roce_module.sh
	local build_status="$?"
	if [ "$build_status" -ne 0 ]; then
		echo "$HOST: Build RoCE failed! Exit code $build_status" >/dev/stderr
		exit "$build_status"
	fi
}

function install_kernel () { 
	show_latest_kernel_commit | tee install.log
	sudo ./build_kernel.sh install 2>&1 | tee -a install.log
	local install_status="${PIPESTATUS[0]}"
	if [ "$install_status" -ne 0 ]; then
		echo "$HOST: Install Kernel failed! Exit code $install_status" >/dev/stderr
		exit "$install_status"
	fi
}

function synchronize_debug () { 
	#./scripts/clang-tools/gen_compile_commands.py
	#scp compile_commands.json "$host_ssh:$host_root/compile_commands.json"

	# Might need to copy in more of the GDB scripts as well. 
	chronic scp "$(readlink vmlinux-gdb.py)" "$frontend_sshname:$host_root/vmlinux-gdb.py"
	chronic scp vmlinux "$frontend_sshname:$host_root/vmlinux"
}

function indent () { 
	if [ $# -eq 1 ]; then
		sed -E "s/^/\t/"
	fi
	"$@" | sed -E "s/^/\t/"
}


operation="$1"
shift
if [ -z "$operation" ]; then
	echo 'Please select: show, sync, build, install, all, clean, '
	echo '               buildonly, installonly, allonly, etc'
	printf '> '
	read -r operation
fi

case "$operation" in 
	'show') 
		show_latest_kernel_commit
		;; 
	'checkout') 
		checkout_kernel_commit "$@"
		;; 
	'cmd') 
		run_command "$@"
		;; 
	'sync') 
		synchronize_kernel_code
		test -e "$guest_root/vmlinux" && synchronize_debug
		;;
	'build') 
		synchronize_kernel_code
		build_kernel
		build_roce
		;;
	'buildonly') 
		build_kernel
		build_roce
		;;
	'rbuild') 
		synchronize_kernel_code
		build_roce
		;;
	'rbuildonly')
		build_roce
		;;
	'mod') 
		synchronize_kernel_code
		build_modules
		;;
	'modonly') 
		build_modules
		;;
	'install') 
		if ! [ -e "$host_root/vmlinux" ]; then 
			synchronize_kernel_code
			build_kernel
		fi
		synchronize_debug
		install_kernel
		;;
	'installonly') 
		if ! [ -e "$host_root/vmlinux" ]; then 
			build_kernel
		fi
		synchronize_debug
		install_kernel
		;;
	'all') 
		synchronize_kernel_code
		build_kernel
		synchronize_debug
		build_roce
		install_kernel
		;;
	'allonly') 
		build_kernel
		build_roce
		synchronize_debug
		install_kernel
		;;
	'clean')
		sudo make clean
		;;
	*)
		echo "$HOST:builder got unknown operation $operation, skipping"
		exit 0
		;;
esac
