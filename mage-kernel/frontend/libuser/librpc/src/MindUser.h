/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MindUser_H
#define MindUser_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "rpc_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MindUserIf {
 public:
  virtual ~MindUserIf() {}
  virtual bool run_command(const int32_t op_code, const std::string& address) = 0;
};

class MindUserIfFactory {
 public:
  typedef MindUserIf Handler;

  virtual ~MindUserIfFactory() {}

  virtual MindUserIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MindUserIf* /* handler */) = 0;
  };

class MindUserIfSingletonFactory : virtual public MindUserIfFactory {
 public:
  MindUserIfSingletonFactory(const ::std::shared_ptr<MindUserIf>& iface) : iface_(iface) {}
  virtual ~MindUserIfSingletonFactory() {}

  virtual MindUserIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(MindUserIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<MindUserIf> iface_;
};

class MindUserNull : virtual public MindUserIf {
 public:
  virtual ~MindUserNull() {}
  bool run_command(const int32_t /* op_code */, const std::string& /* address */) override {
    bool _return = false;
    return _return;
  }
};

typedef struct _MindUser_run_command_args__isset {
  _MindUser_run_command_args__isset() : op_code(false), address(false) {}
  bool op_code :1;
  bool address :1;
} _MindUser_run_command_args__isset;

class MindUser_run_command_args {
 public:

  MindUser_run_command_args(const MindUser_run_command_args&);
  MindUser_run_command_args& operator=(const MindUser_run_command_args&);
  MindUser_run_command_args() noexcept
                            : op_code(0),
                              address() {
  }

  virtual ~MindUser_run_command_args() noexcept;
  int32_t op_code;
  std::string address;

  _MindUser_run_command_args__isset __isset;

  void __set_op_code(const int32_t val);

  void __set_address(const std::string& val);

  bool operator == (const MindUser_run_command_args & rhs) const
  {
    if (!(op_code == rhs.op_code))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const MindUser_run_command_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MindUser_run_command_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MindUser_run_command_pargs {
 public:


  virtual ~MindUser_run_command_pargs() noexcept;
  const int32_t* op_code;
  const std::string* address;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MindUser_run_command_result__isset {
  _MindUser_run_command_result__isset() : success(false) {}
  bool success :1;
} _MindUser_run_command_result__isset;

class MindUser_run_command_result {
 public:

  MindUser_run_command_result(const MindUser_run_command_result&) noexcept;
  MindUser_run_command_result& operator=(const MindUser_run_command_result&) noexcept;
  MindUser_run_command_result() noexcept
                              : success(0) {
  }

  virtual ~MindUser_run_command_result() noexcept;
  bool success;

  _MindUser_run_command_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MindUser_run_command_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MindUser_run_command_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MindUser_run_command_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MindUser_run_command_presult__isset {
  _MindUser_run_command_presult__isset() : success(false) {}
  bool success :1;
} _MindUser_run_command_presult__isset;

class MindUser_run_command_presult {
 public:


  virtual ~MindUser_run_command_presult() noexcept;
  bool* success;

  _MindUser_run_command_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class MindUserClientT : virtual public MindUserIf {
 public:
  MindUserClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  MindUserClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  bool run_command(const int32_t op_code, const std::string& address) override;
  void send_run_command(const int32_t op_code, const std::string& address);
  bool recv_run_command();
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef MindUserClientT< ::apache::thrift::protocol::TProtocol> MindUserClient;

template <class Protocol_>
class MindUserProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<MindUserIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MindUserProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (MindUserProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(nullptr), specialized(nullptr) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_run_command(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run_command(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  MindUserProcessorT(::std::shared_ptr<MindUserIf> iface) :
    iface_(iface) {
    processMap_["run_command"] = ProcessFunctions(
      &MindUserProcessorT::process_run_command,
      &MindUserProcessorT::process_run_command);
  }

  virtual ~MindUserProcessorT() {}
};

typedef MindUserProcessorT< ::apache::thrift::protocol::TDummyProtocol > MindUserProcessor;

template <class Protocol_>
class MindUserProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  MindUserProcessorFactoryT(const ::std::shared_ptr< MindUserIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< MindUserIfFactory > handlerFactory_;
};

typedef MindUserProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > MindUserProcessorFactory;

class MindUserMultiface : virtual public MindUserIf {
 public:
  MindUserMultiface(std::vector<std::shared_ptr<MindUserIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MindUserMultiface() {}
 protected:
  std::vector<std::shared_ptr<MindUserIf> > ifaces_;
  MindUserMultiface() {}
  void add(::std::shared_ptr<MindUserIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool run_command(const int32_t op_code, const std::string& address) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run_command(op_code, address);
    }
    return ifaces_[i]->run_command(op_code, address);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class MindUserConcurrentClientT : virtual public MindUserIf {
 public:
  MindUserConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  MindUserConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  bool run_command(const int32_t op_code, const std::string& address) override;
  int32_t send_run_command(const int32_t op_code, const std::string& address);
  bool recv_run_command(const int32_t seqid);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef MindUserConcurrentClientT< ::apache::thrift::protocol::TProtocol> MindUserConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#include "MindUser.tcc"
#include "rpc_types.tcc"

#endif
