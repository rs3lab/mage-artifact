#ifndef __CTRL_CONFIG_H__
#define __CTRL_CONFIG_H__

#define __TEST__

// Ownership based directory pre-population and make local copy
#define CACHE_DIR_PRE_OPT
#define CACHE_DIR_PRE_POP_IDLE
/* WE DISABLED OWNERSHIP OPTIMIZATION */
// #define CACHE_OWNERSHIP_OPT

#define BFRT_NUM_COMPUTE_NODE 12
#define BFRT_NUM_CONN_COMPUTE_NODE 8
#define BFRT_NUM_MEMORY_NODE 4

// Dependencies
#ifdef CACHE_OWNERSHIP_OPT
#ifndef CACHE_DIR_PRE_OPT
#define CACHE_DIR_PRE_OPT
#endif
#endif

#include "include/disagg/cache_config.h"
#ifndef REGION_SIZE_64KB
#define REGION_SIZE_64KB (4)
#endif


#define MINIMAL_REGION_INDEX REGION_SIZE_4KB
#define MINIMAL_REGION_SHIFT (REGION_SIZE_BASE + MINIMAL_REGION_INDEX)
#define MINIMAL_REGION_SIZE (1 << MINIMAL_REGION_SHIFT)

// #define INITIAL_REGION_INDEX REGION_SIZE_4KB
// #define INITIAL_REGION_INDEX REGION_SIZE_16KB
// #define INITIAL_REGION_INDEX REGION_SIZE_64KB
#define INITIAL_REGION_INDEX REGION_SIZE_2MB
#define INITIAL_REGION_SHIFT (REGION_SIZE_BASE + INITIAL_REGION_INDEX)
#define INITIAL_REGION_SIZE (1 << INITIAL_REGION_SHIFT)

#define INITIAL_REGION_INDEX_EXEC_BRK REGION_SIZE_4KB
#define INITIAL_REGION_SHIFT_EXEC_BRK (REGION_SIZE_BASE + INITIAL_REGION_INDEX_EXEC_BRK)
#define INITIAL_REGION_SIZE_EXEC_BRK (1 << INITIAL_REGION_SHIFT_EXEC_BRK)

#define DYN_CACHE_COEFF (1.0)
#define DYN_CACHE_TAR_DIR (30000)   // 30K
#define DYN_CACHE_HIGH_PRESURE (0.8)
#define DYN_CACHE_HIGH_PRESURE_FREE (1.0 - DYN_CACHE_HIGH_PRESURE)
#define DYN_CACHE_LOW_PRESURE_INV_THRESHOLD (100) // relaxed threshold for merge
#define DYN_CACHE_SLEEP_CYCLE (1) // in second (approximated value)

#define DYN_CACHE_MIN_DIR_FOR_MMAP 32
#define DYN_CACHE_MMAP_MAX_RETRY 500
#define DYN_CACHE_SLEEP_US_IF_NO_DIR 100000     // 100 ms

/* UNCOMMENT FOLLOWINGS TO DISABLE BOUNDED SPLITTING */
// #define DYN_CACHE_DISABLE_MANAGER
// #define DYN_CACHE_DISABLE_MERGE
// #define DYN_CACHE_DISABLE_SPLIT
// #define DYN_CACHE_DISABLE_LOCK  // this switch will control conditional branch to generate locking: turn this on for removing any checking and locking

/* FLAGS FOR TESTING */
// #define __CTRL_RUN_BASE_TEST__
// #define __CTRL_RUN_BFRT_TEST__

// #define TEST_LOCK_MICRO_BENCH

// Kernel
#define DISAGG_CONN_USAGE_REMOTE_FORK        62
#define ERR_DISAGG_FORK_TIMEOUT 101
#define ERR_DISAGG_FORK_NO_PREV 102
#define ERR_DISAGG_FORK_THREAD 103
#define ERR_DISAGG_FORK_REMOTE_THREAD 104

#endif
