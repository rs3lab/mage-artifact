/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mind_ctrl_TYPES_H
#define mind_ctrl_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace mind_ctrl {

class Command;

typedef struct _Command__isset {
  _Command__isset() : id(false), data(false) {}
  bool id :1;
  bool data :1;
} _Command__isset;

class Command : public virtual ::apache::thrift::TBase {
 public:

  Command(const Command&);
  Command& operator=(const Command&);
  Command() noexcept
          : id(0),
            data() {
  }

  virtual ~Command() noexcept;
  int32_t id;
  std::string data;

  _Command__isset __isset;

  void __set_id(const int32_t val);

  void __set_data(const std::string& val);

  bool operator == (const Command & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Command &a, Command &b);

std::ostream& operator<<(std::ostream& out, const Command& obj);

} // namespace

#endif
