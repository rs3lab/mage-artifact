/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MindCtrl_H
#define MindCtrl_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "mind_ctrl_types.h"

namespace mind_ctrl {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MindCtrlIf {
 public:
  virtual ~MindCtrlIf() {}
  virtual void exchange(Command& _return, const Command& cmd) = 0;
};

class MindCtrlIfFactory {
 public:
  typedef MindCtrlIf Handler;

  virtual ~MindCtrlIfFactory() {}

  virtual MindCtrlIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MindCtrlIf* /* handler */) = 0;
  };

class MindCtrlIfSingletonFactory : virtual public MindCtrlIfFactory {
 public:
  MindCtrlIfSingletonFactory(const ::std::shared_ptr<MindCtrlIf>& iface) : iface_(iface) {}
  virtual ~MindCtrlIfSingletonFactory() {}

  virtual MindCtrlIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(MindCtrlIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<MindCtrlIf> iface_;
};

class MindCtrlNull : virtual public MindCtrlIf {
 public:
  virtual ~MindCtrlNull() {}
  void exchange(Command& /* _return */, const Command& /* cmd */) override {
    return;
  }
};

typedef struct _MindCtrl_exchange_args__isset {
  _MindCtrl_exchange_args__isset() : cmd(false) {}
  bool cmd :1;
} _MindCtrl_exchange_args__isset;

class MindCtrl_exchange_args {
 public:

  MindCtrl_exchange_args(const MindCtrl_exchange_args&);
  MindCtrl_exchange_args& operator=(const MindCtrl_exchange_args&);
  MindCtrl_exchange_args() noexcept {
  }

  virtual ~MindCtrl_exchange_args() noexcept;
  Command cmd;

  _MindCtrl_exchange_args__isset __isset;

  void __set_cmd(const Command& val);

  bool operator == (const MindCtrl_exchange_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const MindCtrl_exchange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MindCtrl_exchange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MindCtrl_exchange_pargs {
 public:


  virtual ~MindCtrl_exchange_pargs() noexcept;
  const Command* cmd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MindCtrl_exchange_result__isset {
  _MindCtrl_exchange_result__isset() : success(false) {}
  bool success :1;
} _MindCtrl_exchange_result__isset;

class MindCtrl_exchange_result {
 public:

  MindCtrl_exchange_result(const MindCtrl_exchange_result&);
  MindCtrl_exchange_result& operator=(const MindCtrl_exchange_result&);
  MindCtrl_exchange_result() noexcept {
  }

  virtual ~MindCtrl_exchange_result() noexcept;
  Command success;

  _MindCtrl_exchange_result__isset __isset;

  void __set_success(const Command& val);

  bool operator == (const MindCtrl_exchange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MindCtrl_exchange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MindCtrl_exchange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MindCtrl_exchange_presult__isset {
  _MindCtrl_exchange_presult__isset() : success(false) {}
  bool success :1;
} _MindCtrl_exchange_presult__isset;

class MindCtrl_exchange_presult {
 public:


  virtual ~MindCtrl_exchange_presult() noexcept;
  Command* success;

  _MindCtrl_exchange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MindCtrlClient : virtual public MindCtrlIf {
 public:
  MindCtrlClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MindCtrlClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void exchange(Command& _return, const Command& cmd) override;
  void send_exchange(const Command& cmd);
  void recv_exchange(Command& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MindCtrlProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MindCtrlIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (MindCtrlProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exchange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MindCtrlProcessor(::std::shared_ptr<MindCtrlIf> iface) :
    iface_(iface) {
    processMap_["exchange"] = &MindCtrlProcessor::process_exchange;
  }

  virtual ~MindCtrlProcessor() {}
};

class MindCtrlProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MindCtrlProcessorFactory(const ::std::shared_ptr< MindCtrlIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< MindCtrlIfFactory > handlerFactory_;
};

class MindCtrlMultiface : virtual public MindCtrlIf {
 public:
  MindCtrlMultiface(std::vector<std::shared_ptr<MindCtrlIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MindCtrlMultiface() {}
 protected:
  std::vector<std::shared_ptr<MindCtrlIf> > ifaces_;
  MindCtrlMultiface() {}
  void add(::std::shared_ptr<MindCtrlIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void exchange(Command& _return, const Command& cmd) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exchange(_return, cmd);
    }
    ifaces_[i]->exchange(_return, cmd);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MindCtrlConcurrentClient : virtual public MindCtrlIf {
 public:
  MindCtrlConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MindCtrlConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void exchange(Command& _return, const Command& cmd) override;
  int32_t send_exchange(const Command& cmd);
  void recv_exchange(Command& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
